function [output] = format_time(output)
    dt_now = string(datetime);
    dt_now = strrep(dt_now, ':', '-');
    dt_now = strrep(dt_now, ' ', '+');
    [output] = fullfile(output, dt_now);
end

function [label] = get_label(foldername)
    foldername = strsplit(foldername, '/');
    foldername = string(foldername(end));
    label = strrep(foldername, 'f', '');
    [label] = str2num(label);
end

function gf(descriptor, input, output)
    output = format_time(output);

    % o segundo parametro indica qual tipo est√° sendo verificado
    if ~exist(output, 'dir')
        mkdir(output);
    end
    
    dirs = dir([input, '/**/*.jpeg']);
    display(dirs); 
    
    for i=1:height(dirs)
        display(fullfile(dirs(i).folder, dirs(i).name));
        label = dirs(i).folder;
        label = get_label(label);

        filename = fullfile(dirs(i).folder, dirs(i).name);
        image = imread(filename);

        switch descriptor
            case 'lbp'
                features = lbp(image);
            case 'surf'
                features = surf(image);
            otherwise
                error('descriptor invalid');
        end

        fileout(descriptor, features, string(label), output);
    end
end


function fileout(descriptor, feature, label, output)  
    % a = append
    filename = dir([output, descriptor, ".txt"]);
    display(filename);
    file = fopen(filename, "a");
    for i=1:length(feature)
        fprintf(file, "%s ", num2str(feature(i)));
    end
    fprintf(file, "%s \n", strlabel);
    fclose(file);
end


function feature = lbp(image)
    lbpFeatures = extractLBPFeatures(image);
    numNeighbors = 8;
    numBins = numNeighbors*(numNeighbors-1)+3;
    lbpCellHists = reshape(lbpFeatures, numBins, []);
    feature = reshape(lbpCellHists, 1, []);
end


function [featVector] = surf(image, filename, SURFSize)
    points = detectSURFFeatures( image );
    [histograma, valid_points] = extractFeatures(image, points, 'SURFSize', SURFSize); 
    
                            
    % escreve QTDE. DESCRITORES na tela
    vHist =  size(histograma, 1);
    
    % media
    vetorAux = mean(histograma, 1);
    media =  vetorAux(1:size(vetorAux, 2));
    
    % desvio padrao
    vetorAux = std(histograma, 0, 1);
    desvPad =  vetorAux(1:size(vetorAux, 2));

    % Obliquidade
    vetorAux = skewness(histograma, 0, 1);
    obliq =  vetorAux(1:size(vetorAux, 2));
    if anynan(obliq) == 1
        fprintf("%s\n", filename);
    end

    % Curtose
    vetorAux = kurtosis(histograma, 0, 1);
    curt = vetorAux(1:size(vetorAux, 2));
    if anynan(curt) == 1
         fprintf("%s\n", filename);
    end   

    featVector = [vHist, media, desvPad, obliq, curt];
end

gf('lbp', './test/dataset/GRAYSCALE', 'a');
